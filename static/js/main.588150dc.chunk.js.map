{"version":3,"sources":["components/Login/Login.tsx","components/AppMenuBar/AppMenuBar.tsx","common/APIUtils.ts","components/Lobbies/Lobbies.tsx","components/Prompts/Prompts.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","props","uiConfig","signInFlow","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","unregisterAuthObserver","this","onAuthStateChanged","user","onLogin","firebaseAuth","Component","AppMenuBar","handleLogout","bind","event","onLogout","AppBar","position","Toolbar","Grid","justify","container","item","Typography","variant","Button","hidden","color","onClick","APIUtils","uid","gameType","createLobbyRequest","userId","console","log","putRequest","createLobbyResponse","roomCode","joinLobbyRequest","lobbyCode","joinLobbyResponse","url","request","fetch","method","headers","body","JSON","stringify","then","response","json","catch","Lobbies","state","selectedGame","handleRoomCodeChange","handleSelectedGameChange","handleJoinLobbyButtonPress","handleCreateLobbyButtonPress","createLobby","joinLobby","TextField","label","value","onChange","name","setState","target","requestCreateLobby","success","data","message","requestJoinLobby","setLobbyAccessToken","accessToken","Prompts","db","ref","on","snapshot","val","config","FireBaseConfig","app","initializeApp","database","Main","currentUser","gameData","lobbyAccessToken","content","className","signOut","newToken","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.588150dc.chunk.js","sourcesContent":["// example used from https://github.com/firebase/firebaseui-web-react\n\n// Import FirebaseAuth and firebase.\nimport firebase from 'firebase';\nimport React, { Component } from 'react';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\n\nclass Login extends Component<{ onLogin: any }, {}>  {\n  constructor(props: any) {\n    super(props);\n    this.unregisterAuthObserver = () => { };\n  }\n\n  // Configure FirebaseUI.\n  uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // We will display Google\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false\n    }\n  };\n\n  unregisterAuthObserver() {\n    // this will be set below\n  }\n\n  // Listen to the Firebase Auth state and set the local state.\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n      (user) => this.props.onLogin(user)\n    );\n  }\n\n  // Make sure we un-register Firebase observers when the component unmounts.\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    return (\n      <div>\n        <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={firebase.auth()} />\n      </div>\n    );\n  }\n}\nexport default Login","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Button, Typography, Grid } from '@material-ui/core';\n\nclass AppMenuBar extends Component<{ onLogout: any }, {}> {\n  constructor(props: any) {\n    super(props);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  handleLogout(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    this.props.onLogout();\n  }\n  public render() {\n    return <div >\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Grid justify=\"space-between\" container>\n            <Grid item>\n              <Typography variant=\"h6\">Cloud Games</Typography>\n            </Grid>\n            <Grid item>\n              <Button hidden={true} color=\"inherit\" onClick={this.handleLogout}>Logout</Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </div>;\n  }\n}\n\nexport default AppMenuBar;\n","class APIUtils {\n  // api functions\n  public static async requestCreateLobby(uid: string, gameType: string) {\n    // create request\n    const createLobbyRequest = {\n      userId: uid,\n      gameType: gameType,\n    };\n\n    console.log('create API Utils call');\n    // send request\n    const createLobbyResponse = await this.putRequest(\n      'https://us-central1-cloudboardgames.cloudfunctions.net/createNewLobby',\n      createLobbyRequest\n    );\n    return createLobbyResponse;\n  }\n  public static async requestJoinLobby(uid: string, roomCode: string) {\n    // create request\n    const joinLobbyRequest = {\n      userId: uid,\n      lobbyCode: roomCode,\n    };\n\n    // send request\n    const joinLobbyResponse = await this.putRequest(\n      'https://us-central1-cloudboardgames.cloudfunctions.net/joinLobby',\n      joinLobbyRequest\n    );\n    return joinLobbyResponse;\n  }\n  private static async putRequest(url: string, request: any): Promise<any> {\n    console.log('create putRequest call on url: ' + url);\n\n    // / Default options are marked with *\n    const proxyurl = 'https://cors-anywhere.herokuapp.com/';\n\n    const response = await fetch(proxyurl + url, {\n      method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request),\n    })\n      .then((response) => response.json())\n      .catch(() =>\n        console.log('Canâ€™t access ' + url + ' response. Blocked by browser?')\n      );\n    return response; // parses JSON response into native JavaScript objects\n  }\n}\nexport default APIUtils;\n","import React, { Component } from 'react';\n\nimport { Button, TextField } from '@material-ui/core';\nimport APIUtils from '../../common/APIUtils';\n\n\nclass Lobbies extends Component<{ db: any, userId: string, setLobbyAccessToken(newToken: string): void }, { roomCode: string, selectedGame: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      roomCode: '',\n      selectedGame: 'COLEBOXGAMES'\n    }\n\n    // state changes\n    this.handleRoomCodeChange = this.handleRoomCodeChange.bind(this);\n    this.handleSelectedGameChange = this.handleSelectedGameChange.bind(this);\n\n    // buttons\n    this.handleJoinLobbyButtonPress = this.handleJoinLobbyButtonPress.bind(this);\n    this.handleCreateLobbyButtonPress = this.handleCreateLobbyButtonPress.bind(this);\n\n    // api\n    this.createLobby = this.createLobby.bind(this);\n    this.joinLobby = this.joinLobby.bind(this);\n  }\n\n  public render() {\n    return <div>\n      <div>\n        <h3>Join Lobby</h3>\n        <div>\n          <TextField variant=\"outlined\" label=\"Room Code\" value={this.state.roomCode} onChange={this.handleRoomCodeChange} />\n        </div>\n        <br></br>\n        <div>\n          <Button variant=\"outlined\" onClick={this.handleJoinLobbyButtonPress}>Join</Button>\n        </div>\n      </div>\n      <br></br>\n      <div>\n        <h3>Create Lobby</h3>\n        <div>\n          <select name=\"createLobbyPicker\" onChange={this.handleSelectedGameChange}>\n            <option value=\"COLEBOXGAMES\">Cole Box Games</option>\n          </select>\n        </div>\n        <br></br>\n        <div>\n          <Button variant=\"outlined\" onClick={this.handleCreateLobbyButtonPress}>Create</Button>\n        </div>\n      </div>\n\n    </div >;\n  }\n  public handleRoomCodeChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ roomCode: event.target.value })\n  }\n  public handleSelectedGameChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.setState({ selectedGame: event.target.value })\n  }\n  public handleCreateLobbyButtonPress(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.createLobby();\n  }\n  public handleJoinLobbyButtonPress(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.joinLobby(this.state.roomCode);\n  }\n  // api functions\n  public async createLobby() {\n    const createLobbyResponse = await APIUtils.requestCreateLobby(this.props.userId, this.state.selectedGame);\n\n    if (createLobbyResponse.success) {\n      await this.joinLobby(createLobbyResponse.data.lobbyCode);\n    } else {\n      console.log(createLobbyResponse.message);\n    }\n  }\n  public async joinLobby(roomCode: string) {\n    const joinLobbyResponse = await APIUtils.requestJoinLobby(this.props.userId, roomCode);\n    if (joinLobbyResponse.success) {\n      this.props.setLobbyAccessToken(joinLobbyResponse.data.accessToken);\n    } else {\n      console.log(joinLobbyResponse.message);\n    }\n\n  }\n\n}\n\nexport default Lobbies;\n","import React, { Component } from 'react';\n\n\n\nclass Prompts extends Component<{ db: any, userId: string, accessToken: string }, { data: any }> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: null\n    }\n  }\n\n  public componentDidMount() {\n    // listen to updates\n    const lobbyRef = this.props.db.ref('lobbies/' + this.props.accessToken);\n    lobbyRef.on('value', (snapshot: any) => {\n      console.log('got an update')\n      const data = snapshot.val();\n      this.setState({ data: data });\n    });\n\n  }\n  public render() {\n\n    return <div>\n      <div>Got a lobby id of {this.props.accessToken}!</div>\n      <div>\n        <pre>\n          {JSON.stringify(this.state.data, null, 2)}\n        </pre>\n      </div>\n\n    </div >;\n  }\n\n}\n\nexport default Prompts;\n","import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport FireBaseConfig from '../../config/firebase.config.json'\nimport Login from '../Login/Login';\nimport AppMenuBar from '../AppMenuBar/AppMenuBar';\nimport Lobbies from '../Lobbies/Lobbies';\nimport CurrentUser from '../../common/CurrentUser';\nimport Prompts from '../Prompts/Prompts';\n\n// Configure Firebase.\nvar config = FireBaseConfig;\nvar app = firebase.initializeApp(config);\nvar db = firebase.database(app);\n\nclass Main extends Component<any, { currentUser: CurrentUser | null, lobbyAccessToken: string | null, gameData: any }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      currentUser: null,\n      gameData: null,\n      lobbyAccessToken: null\n    }\n    this.onLogin = this.onLogin.bind(this);\n    this.onLogout = this.onLogout.bind(this);\n    this.setLobbyAccessToken = this.setLobbyAccessToken.bind(this);\n  }\n\n  public render() {\n    var content = null;\n    if (this.state.currentUser == null) {\n      content = (<Login onLogin={this.onLogin} />);\n    }\n    else {\n      if (this.state.lobbyAccessToken == null) {\n        content = (<Lobbies db={db} userId={this.state.currentUser.uid} setLobbyAccessToken={this.setLobbyAccessToken}></Lobbies>);\n      }\n      else {\n        content = (<Prompts db={db} userId={this.state.currentUser.uid} accessToken={this.state.lobbyAccessToken}></Prompts>);\n      }\n    }\n    return <div>\n      <AppMenuBar onLogout={this.onLogout}></AppMenuBar>\n      <div className=\"mainContent\">\n        {content}\n      </div>\n    </div>;\n  }\n\n  public onLogin(currentUser: any) {\n    this.setState({ currentUser: currentUser });\n  }\n  public onLogout() {\n    firebase.auth().signOut();\n    this.setState({ currentUser: null })\n  }\n  public setLobbyAccessToken(newToken: string) {\n    this.setState({ lobbyAccessToken: newToken });\n  }\n\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (<Main></Main>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}