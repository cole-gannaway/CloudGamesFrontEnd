{"version":3,"sources":["components/AppMenuBar/AppMenuBar.tsx","common/APIUtils.ts","components/Lobbies/Lobbies.tsx","components/Prompts/Prompts.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppMenuBar","props","AppBar","position","Toolbar","Grid","justify","container","item","Typography","variant","Component","APIUtils","uid","gameType","createLobbyRequest","userId","console","log","this","putRequest","createLobbyResponse","roomCode","joinLobbyRequest","lobbyCode","joinLobbyResponse","url","request","fetch","method","headers","body","JSON","stringify","then","response","json","catch","Lobbies","state","selectedGame","handleUserIdChange","bind","handleRoomCodeChange","handleSelectedGameChange","handleJoinLobbyButtonPress","handleCreateLobbyButtonPress","createLobby","joinLobby","validateUserId","TextField","required","error","label","value","onChange","Button","disabled","onClick","name","event","setUserId","target","setState","requestCreateLobby","success","data","message","requestJoinLobby","setLobbyAccessToken","accessToken","Prompts","db","ref","on","snapshot","val","config","FireBaseConfig","app","firebase","initializeApp","database","Main","gameData","lobbyAccessToken","content","className","newUserId","newToken","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39201b90.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Button, Typography, Grid } from '@material-ui/core';\n\nclass AppMenuBar extends Component<{}, {}> {\n  constructor(props: any) {\n    super(props);\n\n  }\n\n\n  public render() {\n    return <div >\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Grid justify=\"space-between\" container>\n            <Grid item>\n              <Typography variant=\"h6\">Cloud Games</Typography>\n            </Grid>\n            <Grid item>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </div>;\n  }\n}\n\nexport default AppMenuBar;\n","class APIUtils {\n  // api functions\n  public static async requestCreateLobby(uid: string, gameType: string) {\n    // create request\n    const createLobbyRequest = {\n      userId: uid,\n      gameType: gameType,\n    };\n\n    console.log('create API Utils call');\n    // send request\n    const createLobbyResponse = await this.putRequest(\n      'https://us-central1-cloudboardgames.cloudfunctions.net/createNewLobby',\n      createLobbyRequest\n    );\n    return createLobbyResponse;\n  }\n  public static async requestJoinLobby(uid: string, roomCode: string) {\n    // create request\n    const joinLobbyRequest = {\n      userId: uid,\n      lobbyCode: roomCode,\n    };\n\n    // send request\n    const joinLobbyResponse = await this.putRequest(\n      'https://us-central1-cloudboardgames.cloudfunctions.net/joinLobby',\n      joinLobbyRequest\n    );\n    return joinLobbyResponse;\n  }\n  private static async putRequest(url: string, request: any): Promise<any> {\n    console.log('create putRequest call on url: ' + url);\n\n    // / Default options are marked with *\n    const proxyurl = 'https://cors-anywhere.herokuapp.com/';\n\n    const response = await fetch(proxyurl + url, {\n      method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request),\n    })\n      .then((response) => response.json())\n      .catch(() =>\n        console.log('Canâ€™t access ' + url + ' response. Blocked by browser?')\n      );\n    return response; // parses JSON response into native JavaScript objects\n  }\n}\nexport default APIUtils;\n","import React, { Component } from 'react';\n\nimport { Button, TextField } from '@material-ui/core';\nimport APIUtils from '../../common/APIUtils';\n\n\nclass Lobbies extends Component<{ db: any, userId: string, setLobbyAccessToken(newToken: string): void, setUserId(newId: string): void }, { roomCode: string, selectedGame: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      roomCode: '',\n      selectedGame: 'COLEBOXGAMES'\n    }\n\n    // state changes\n    this.handleUserIdChange = this.handleUserIdChange.bind(this);\n    this.handleRoomCodeChange = this.handleRoomCodeChange.bind(this);\n    this.handleSelectedGameChange = this.handleSelectedGameChange.bind(this);\n\n    // buttons\n    this.handleJoinLobbyButtonPress = this.handleJoinLobbyButtonPress.bind(this);\n    this.handleCreateLobbyButtonPress = this.handleCreateLobbyButtonPress.bind(this);\n\n    // api\n    this.createLobby = this.createLobby.bind(this);\n    this.joinLobby = this.joinLobby.bind(this);\n\n    // helpers\n    this.validateUserId = this.validateUserId.bind(this);\n\n  }\n\n  public render() {\n    return <div>\n      <div>\n        <h3>Create Id</h3>\n        <div>\n          <TextField variant=\"outlined\" required error={!(this.validateUserId(this.props.userId))} label=\"User Id\" value={this.props.userId} onChange={this.handleUserIdChange} />\n        </div>\n        <h3>Join Lobby</h3>\n        <div>\n          <TextField variant=\"outlined\" label=\"Room Code\" value={this.state.roomCode} onChange={this.handleRoomCodeChange} />\n        </div>\n        <br></br>\n        <div>\n          <Button variant=\"outlined\" disabled={!(this.validateUserId(this.props.userId))} onClick={this.handleJoinLobbyButtonPress}>Join</Button>\n        </div>\n      </div>\n      <br></br>\n      <div>\n        <h3>Create Lobby</h3>\n        <div>\n          <select name=\"createLobbyPicker\" onChange={this.handleSelectedGameChange}>\n            <option value=\"COLEBOXGAMES\">Cole Box Games</option>\n          </select>\n        </div>\n        <br></br>\n        <div>\n          <Button variant=\"outlined\" disabled={!(this.validateUserId(this.props.userId))} onClick={this.handleCreateLobbyButtonPress}>Create</Button>\n        </div>\n      </div>\n\n    </div >;\n  }\n\n  // handlers\n  public handleUserIdChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.props.setUserId(event.target.value);\n  }\n  public handleRoomCodeChange(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ roomCode: event.target.value })\n  }\n  public handleSelectedGameChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.setState({ selectedGame: event.target.value })\n  }\n  public handleCreateLobbyButtonPress(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.createLobby();\n  }\n  public handleJoinLobbyButtonPress(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.joinLobby(this.state.roomCode);\n  }\n\n  // helpers\n  public validateUserId(userId: string) {\n    // can't be empty or null\n    if (userId) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n\n  // api functions\n  public async createLobby() {\n    const createLobbyResponse = await APIUtils.requestCreateLobby(this.props.userId, this.state.selectedGame);\n\n    if (createLobbyResponse.success) {\n      await this.joinLobby(createLobbyResponse.data.lobbyCode);\n    } else {\n      console.log(createLobbyResponse.message);\n    }\n  }\n  public async joinLobby(roomCode: string) {\n    const joinLobbyResponse = await APIUtils.requestJoinLobby(this.props.userId, roomCode);\n    if (joinLobbyResponse.success) {\n      this.props.setLobbyAccessToken(joinLobbyResponse.data.accessToken);\n    } else {\n      console.log(joinLobbyResponse.message);\n    }\n\n  }\n\n}\n\nexport default Lobbies;\n","import React, { Component } from 'react';\n\n\n\nclass Prompts extends Component<{ db: any, userId: string, accessToken: string }, { data: any }> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: null\n    }\n  }\n\n  public componentDidMount() {\n    // listen to updates\n    const lobbyRef = this.props.db.ref('lobbies/' + this.props.accessToken);\n    lobbyRef.on('value', (snapshot: any) => {\n      console.log('got an update')\n      const data = snapshot.val();\n      this.setState({ data: data });\n    });\n\n  }\n  public render() {\n\n    return <div>\n      <div>Got a lobby id of {this.props.accessToken}!</div>\n      <div>\n        <pre>\n          {JSON.stringify(this.state.data, null, 2)}\n        </pre>\n      </div>\n\n    </div >;\n  }\n\n}\n\nexport default Prompts;\n","import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport FireBaseConfig from '../../config/firebase.config.json'\nimport AppMenuBar from '../AppMenuBar/AppMenuBar';\nimport Lobbies from '../Lobbies/Lobbies';\nimport CurrentUser from '../../common/CurrentUser';\nimport Prompts from '../Prompts/Prompts';\n\n// Configure Firebase.\nvar config = FireBaseConfig;\nvar app = firebase.initializeApp(config);\nvar db = firebase.database(app);\n\nclass Main extends Component<any, { userId: string, lobbyAccessToken: string | null, gameData: any }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      userId: '',\n      gameData: null,\n      lobbyAccessToken: null\n    }\n    this.setUserId = this.setUserId.bind(this);\n    this.setLobbyAccessToken = this.setLobbyAccessToken.bind(this);\n  }\n\n  public render() {\n    var content = null;\n    if (this.state.lobbyAccessToken == null) {\n      content = (<Lobbies db={db} userId={this.state.userId} setLobbyAccessToken={this.setLobbyAccessToken} setUserId={this.setUserId}></Lobbies>);\n    }\n    else {\n      content = (<Prompts db={db} userId={this.state.userId} accessToken={this.state.lobbyAccessToken}></Prompts>);\n    }\n    return <div>\n      <AppMenuBar></AppMenuBar>\n      <div className=\"mainContent\">\n        {content}\n      </div>\n    </div>;\n  }\n\n  public setUserId(newUserId: string) {\n    this.setState({ userId: newUserId });\n  }\n  public setLobbyAccessToken(newToken: string) {\n    this.setState({ lobbyAccessToken: newToken });\n  }\n\n}\n\nexport default Main;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (<Main></Main>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}